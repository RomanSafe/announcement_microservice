openapi: 3.0.3
info:
  title: Announcement manager
  description: This is an application which help you manage announcements.
  termsOfService: https://example.com/terms/
  contact:
    name: API Support
    url: https://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
paths:
  /announcements:
    get:
      description: Returns all announcements
      responses:
        "200":
          $ref: "#/components/responses/GetItemsResponse"
        "400":
          $ref: "#/components/responses/GetItemsResponse"
        "422":
          $ref: "#/components/responses/GetItemsResponse"
        default:
          $ref: "#/components/responses/GetItemsResponse"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllAnnouncements.Arn}/invocations"
        type: aws_proxy
        credentials: "arn:aws:iam::234723943124:role/apigateway-invoke-lambda-role"
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
      parameters:
        - name: title
          in: query
          description: title attribute of LastEvaluatedKey for pagination
          required: false
          schema:
            type: string
          style: form
          explode: true
          example: title=test
        - name: date-time
          in: query
          description: date-time attribute of LastEvaluatedKey for pagination
          required: false
          schema:
            type: string
            format: date-time
          style: form
          explode: true
          example: date-time=2021-10-05T11:43:18.248314+00:00
        - name: next-page-number
          in: query
          description: Number of the next page
          required: false
          schema:
            type: integer
            format: int32
          style: form
          explode: true
          example: next-page-number=2
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
                method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                method.response.header.Access-Control-Allow-Methods: '''*'''
                method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /announcements/add:
    post:
      description:  Add a new announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAnnouncementRequestBody"
            example:
              $ref: "#/components/examples/NewAnnouncement"
      responses:
        "201":
          $ref: "#/components/responses/AddItemResponse"
        "400":
          $ref: "#/components/responses/AddItemResponse"
        "415":
          $ref: "#/components/responses/AddItemResponse"
        default:
          $ref: "#/components/responses/AddItemResponse"
      security:
        - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddAnnouncement.Arn}/invocations"
        type: aws_proxy
        credentials: "arn:aws:iam::234723943124:role/apigateway-invoke-lambda-role"
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/Access-Control-Allow-Methods"
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/Access-Control-Allow-Headers"
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
components:
  schemas:
    AnnouncementItem:
      type: object
      properties:
        title:
          description: Title of announcement
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SimpleString"
        date-time:
          description: Timestamp of announcement
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SimpleString"
        description:
          description: Details about new announcement
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SimpleString"
      required:
        - title
        - date-time
        - description
    SimpleString:
      type: string
    AnnouncementsPagination:
      type: object
      properties:
        page:
          description: A order number of page
          type: string
        announcements:
          description: List of announcements
          type: array
          items:
            $ref: "#/components/schemas/AnnouncementItem"
        next_page:
          description: URL of the next page
          type: string
      required:
        - page
        - announcements
        - next_page
    NewAnnouncementRequestBody:
      type: object
      properties:
        title:
          description: Title of announcement
          type: string
        description:
          description: Details about new announcement
          type: string
      required:
        - title
        - description
    PydanticValidationError:
      type: array
      items:
        type: object
        properties:
          loc:
            description: Location of an error
            type: array
            items:
              type: string
          msg:
            description: Details about an error
            type: string
          type:
            description: Type of an error
            type: string
          ctx:
            description: Validation parameter
            type: object
        required:
          - loc
          - msg
          - type
    AddItemResponse:
      type: object
      properties:
        message:
          description: A short description of an event
          type: string
        details:
          description: Details about an event
          oneOf:
          - $ref: "#/components/schemas/AnnouncementItem"
          - $ref: "#/components/schemas/SimpleString"
          - $ref: "#/components/schemas/PydanticValidationError"
      required:
        - message
        - details
    ClientErrorResponse:
      type: object
      properties:
        Code:
          description: Type of error
          type: string
        Message:
          description: Details about an error
          type: string
      required:
        - Message
        - Code
  responses:
    AddItemResponse:
      description: Add item unified response
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/Access-Control-Allow-Methods"
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/Access-Control-Allow-Headers"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AddItemResponse"
          examples:
            AnnouncementAdded201:
              $ref: "#/components/examples/AnnouncementAdded201"
    GetItemsResponse:
      description: Item added successfully
      headers:
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/Access-Control-Allow-Methods"
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/Access-Control-Allow-Headers"
      content:
        application/json:
          schema:
            oneOf:
            - $ref: "#/components/schemas/AnnouncementsPagination"
            - $ref: "#/components/schemas/PydanticValidationError"
            - $ref: "#/components/schemas/SimpleString"
            - $ref: "#/components/schemas/ClientErrorResponse"
          examples:
            ListOfAnnouncements:
              $ref: "#/components/examples/ListOfAnnouncements"
  headers:
    Access-Control-Allow-Origin:
      schema:
        $ref: "#/components/schemas/SimpleString"
    Access-Control-Allow-Methods:
      schema:
        $ref: "#/components/schemas/SimpleString"
    Access-Control-Allow-Headers:
      schema:
        $ref: "#/components/schemas/SimpleString"
  examples:
    NewAnnouncement:
      summary: Request body with new announcement should look like
      value:
        title: An exciting event!
        description: Colorful description here
    AnnouncementAdded201:
      summary: Response body when new announcement added
      value:
        message: Added a new announcement
        details:
          title: test title
          date-time: 2021-09-28T12:39:34.760673+00:00
          description: test description
    SingleAnnouncement:
      summary: JSON with an announcement should look like
      value:
        title:
          S: An exciting event!
        date-time:
          S: 2021-09-28T06:47:57.098752+00:00
        description:
          S: Colorful description here
    ListOfAnnouncements:
      summary: JSON with list of announcements should look like
      value: [
        {
          "title": {"S": "Manual test event!"},
          "description": {"S": "test"},
          "date-time": {"S": "2021-09-28T06:47:57.098752+00:00"}
        },
        {
          "title": {"S": "test postman"},
          "description": {"S": "test postman"},
          "date-time": {"S": "2021-09-29T06:47:57.098752+00:00"}
        },
        {
          "title": {"S": "test short event"},
          "description": {"S": "test postman"},
          "date-time": {"S": "2021-09-30T06:47:57.098752+00:00"}
        }
      ]
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools,
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools,
        providerARNs: "arn:aws:cognito-idp:${AWS::Region}:234723943124:userpool/${CognitoUserPool.id}"
